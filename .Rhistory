}
i
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
for(i in 1:nrow(countyPop)){
if( substring(countyPop[i,2], (nchar(countyPop[i,2])-6)) == "County"){
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[,2]) - 7))
}
}
View(countyPop)
View(countyPop)
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
for(i in 1:nrow(countyPop)){
if( substring(countyPop[i,2], (nchar(countyPop[i,2])-6), nchar(countyPop[i,2])) == "County"){
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[,2]) - 7))
}
}
View(countyPop)
i
i == 5
i = 5
countyPop[i,]
substring(countyPop[i,2], (nchar(countyPop[i,2])-6), nchar(countyPop[i,2]))
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
rm(i)
substring(countyPop[i,2], (nchar(countyPop[i,2])-6), nchar(countyPop[i,2]))
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
for(i in 1:nrow(countyPop)){
if( substring(countyPop[i,2], (nchar(countyPop[i,2])-5), nchar(countyPop[i,2])) == "County"){
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[,2]) - 6))
}
}
View(countyPop)
i
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
i = 5
i
countyPop[i,]
substring(countyPop[i,2], (nchar(countyPop[i,2])-5), nchar(countyPop[i,2])) == "County"
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[,2]) - 6))
countyPop[i,]
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
i
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[,2]) - 8))
countyPop[i,]
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
for(i in 1:nrow(countyPop)){
if( substring(countyPop[i,2], (nchar(countyPop[i,2])-5), nchar(countyPop[i,2])) == "County"){
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[,2]) - 8))
}
}
View(countyPop)
head(countyPop)
rm(i)
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
head(countyPop)
for(i in 1:nrow(countyPop)){
if( substring(countyPop[i,2], (nchar(countyPop[i,2])-5), nchar(countyPop[i,2])) == "County"){
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[,2]) - 8))
}
}
head(countyPop)
substr("ahmad", 1,4)
substr("ahmad", 1,3)
substr("ahmad", 1, nchar("ahmad")-5)
substr("ahmad", 1, nchar("ahmad")-2)
substr("ahmad county", 1, nchar("ahmad county")-8)
substr("ahmad county", 1, nchar("ahmad county")-8)
substr("ahmad county", 1, nchar("ahmad county")-6)
substr("ahmad county", 1, nchar("ahmad county")-7)
substr("ahmad county", 1, nchar("ahmad county")-7)
substr("ahmad county", 1, nchar("ahmad county")-7)
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
for(i in 1:nrow(countyPop)){
if( substring(countyPop[i,2], (nchar(countyPop[i,2])-5), nchar(countyPop[i,2])) == "County"){
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[i,2]) - 7))
}
}
head(countyPop)
head(usData)
length(usData$Admin2)
length(unique(usData$Admin2))
length(unique(usData$Admin2))*2
length(unique(usData$Admin2))
head(countyPop)
paste(countyPop$county, countyPop$state)
paste(countyPop$county, countyPop$state, sep = "")
countyPop[,3] = substr(countyPop[,3], 2, nchar(countyPop[,3]))
head(countyPop)
paste(countyPop$county, countyPop$state, sep = "")
countyPop$name = paste(countyPop$county, countyPop$state, sep = "")
head(countyPop)
head(usData)
usData$countyState = paste(usData$Admin2, usData$Province_State, sep = "")
head(usData)
length(usDa``)
length(usData$countyState)
length(unique(usData$countyState))
usData$Confirmed[usData$countyState == "Autauga"]
usData[usData$countyState == "Autauga",]
usData[usData$countyState == "AutaugaAlabama",]
usData$Confirmed[usData$countyState == "AutaugaAlabama"]
for(i in 1:3270){
x = usData$countyState
covid_county[i,1] = x
xConfirmed <- usData$Confirmed[usData$countyState == x]
xPop <- countyPop$pop[countyPop$name == x]
covid_county[i,2] = xConfirmed/xPop
}
covid_county = matrix(0, ncol = 2, nrow = 3270)    # length(usData$Admin2)
for(i in 1:3270){
x = usData$countyState
covid_county[i,1] = x
xConfirmed <- usData$Confirmed[usData$countyState == x]
xPop <- countyPop$pop[countyPop$name == x]
covid_county[i,2] = xConfirmed/xPop
}
x
for(i in 1:3270){
x = usData$countyState[i]
covid_county[i,1] = x
xConfirmed <- usData$Confirmed[usData$countyState == x]
xPop <- countyPop$pop[countyPop$name == x]
covid_county[i,2] = xConfirmed/xPop
}
xConfirmed
xPop
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
head(countyPop)
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
head(countyPop)
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
head(countyPop)
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
countyPop[,3] = substr(countyPop[,3], 2, nchar(countyPop[,3]))
for(i in 1:nrow(countyPop)){
if( substring(countyPop[i,2], (nchar(countyPop[i,2])-5), nchar(countyPop[i,2])) == "County"){
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[i,2]) - 7))
}
}
# Glue together county and state
countyPop$name = paste(countyPop$county, countyPop$state, sep = "")
usData$countyState = paste(usData$Admin2, usData$Province_State, sep = "")
covid_county = matrix(0, ncol = 2, nrow = 3270)    # length(usData$Admin2)
for(i in 1:3270){
x = usData$countyState[i]
covid_county[i,1] = x
xConfirmed <- usData$Confirmed[usData$countyState == x]
xPop <- countyPop$pop[countyPop$name == x]
covid_county[i,2] = xConfirmed/xPop
}
xPop
xConfirmed
head(countyPop)
x
usData$Admin2
usData$Province_State
usData$countyState = paste(usData$Admin2, usData$Province_State, sep = "")
usData$countyState
covid_county = matrix(0, ncol = 2, nrow = 3270)    # length(usData$Admin2)
for(i in 1:3270){
x = usData$countyState[i]
covid_county[i,1] = x
xConfirmed <- usData$Confirmed[usData$countyState == x]
xPop <- countyPop$pop[countyPop$name == x]
covid_county[i,2] = xConfirmed/xPop
}
x
usData$countyState
usData$countyState[1]
usData$countyState[2]
i
usData$countyState[53]
usData$countyState[50:55]
usData$Admin2[50:55]
usData[53,]
i
xPop
xPop == 0
xPop == NULL
length(xPop)
length(xPop) == 0
length(20)
for(i in 1:3270){
x = usData$countyState[i]
covid_county[i,1] = x
xConfirmed <- usData$Confirmed[usData$countyState == x]
xPop <- countyPop$pop[countyPop$name == x]
if(length(xPop) == 1){
covid_county[i,2] = xConfirmed/xPop
}
else{ next }
}
covid_county
covid_county = matrix("untouched", ncol = 2, nrow = 3270)    # length(usData$Admin2)
covid_county
for(i in 1:3270){
x = usData$countyState[i]
covid_county[i,1] = x
xConfirmed <- usData$Confirmed[usData$countyState == x]
xPop <- countyPop$pop[countyPop$name == x]
if(length(xPop) == 1){
covid_county[i,2] = xConfirmed/xPop
}
else{ next }
}
covid_county
# Look at one that were untouched
covid_county[,covid_county[,2] == "untouched"]
# Look at one that were untouched
covid_county[covid_county[,2] == "untouched"]
# Look at one that were untouched
covid_county[,2] == "untouched"
# Look at one that were untouched
covid_county[covid_county[,2] == "untouched"]
# Look at one that were untouched
head(covid_county[covid_county[,2] == "untouched"])
# Look at one that were untouched
head(covid_county[,1][covid_county[,2] == "untouched"])
covid_county[,1]
covid_county[,1] == "untouched"
sum(covid_county[,1] == "untouched")
sum(covid_county[,2] == "untouched")
length(usData$countyState)
length(x$name)
length(countyPop$name)
3270-3142
d
head(d)
# Look at one that were untouched
d$mergedName <- paste(d$county, d$state, sep = "")
head(d)
head(countyCovid)
head(covid_county)
head(covid_county)
d$mergedName[1]
head(d)
d$county_covid <- "proportion"
# Look at one that were untouched
d$mergedName <- paste(d$county, d$state, sep = "")
d$county_covid <- "proportion"
for(i in 1:nrow(d)){
x = d$mergedName[i]
propCov = covid_county[,2][covid_county[,1] == x]
d$county_covid[i] = propCov
}
head(covid_county)
propCov
i
covid_county[63:67]
covid_county[63:67,]
x
d[63:67,]
"CacheUtah" %in% covid_county[,1]
# Look at one that were untouched
d$mergedName <- paste(d$county, d$state, sep = "")
d$county_covid <- "proportion"
for(i in 1:nrow(d)){
x = d$mergedName[i]
propCov = covid_county[,2][covid_county[,1] == x]
if(length(propCov) == 1){
d$county_covid[i] = propCov
}
}
head(d)
d$county_covid == "proportion"
sum(d$county_covid == "proportion")
d[d$county_covid == "proportion",]
covid_county
View(covid_county)
View(covid_county)
d[d$county_covid == "proportion",]
head(d)
# Look at one that were untouched
d$county[d$county == "New York City"] = "New York"
d$mergedName <- paste(d$county, d$state, sep = "")
d$county_covid <- "proportion"
for(i in 1:nrow(d)){
x = d$mergedName[i]
propCov = covid_county[,2][covid_county[,1] == x]
if(length(propCov) == 1){
d$county_covid[i] = propCov
}
}
d[d$county_covid == "proportion",]
dim(d[d$county_covid == "proportion",])
View(d[d$county_covid == "proportion",])
View(covid_county)
# Look at one that were untouched
d$county[d$county == "New York City"] = "New York"
d$county[d$county == "Washington, D.C."] = "District of Columbia"
d$mergedName <- paste(d$county, d$state, sep = "")
d$county_covid <- "proportion"
for(i in 1:nrow(d)){
x = d$mergedName[i]
propCov = covid_county[,2][covid_county[,1] == x]
if(length(propCov) == 1){
d$county_covid[i] = propCov
}
}
View(d[d$county_covid == "proportion",])
dim(d[d$county_covid == "proportion",])
# Look at one that were untouched
d$county[d$county == "New York City"] = "New York"
d$county[d$county == "Washington, D.C."] = "District of Columbia"
d$county[d$county == "St. Louis County"] = "St. Louis"
d$mergedName <- paste(d$county, d$state, sep = "")
d$county_covid <- "proportion"
for(i in 1:nrow(d)){
x = d$mergedName[i]
propCov = covid_county[,2][covid_county[,1] == x]
if(length(propCov) == 1){
d$county_covid[i] = propCov
}
}
dim(d[d$county_covid == "proportion",])
View(d[d$county_covid == "proportion",])
covid_county
3998/128289
covid_county[,1] == "CacheUtah"
sum(covid_county[,1] == "CacheUtah")
rbind(covid_county, c("CacheUtah", 3998/128289)
)
covid_county = rbind(covid_county, c("CacheUtah", 3998/128289))
d$mergedName <- paste(d$county, d$state, sep = "")
d$county_covid <- "proportion"
for(i in 1:nrow(d)){
x = d$mergedName[i]
propCov = covid_county[,2][covid_county[,1] == x]
if(length(propCov) == 1){
d$county_covid[i] = propCov
}
}
dim(d[d$county_covid == "proportion",])
View(d[d$county_covid == "proportion",])
head()
head(d)
# NOTE THAT THERE ARE 19 UNIVERSITIES WHOSE COVID PROPS R UNFILLED
plot(d$county_covid, d$cases)
max(d$county_covid)
max(d$county_covid[d$county_covid != "untouched"])
View(d[d$county_covid == "untouched",])
dim(d[d$county_covid == "untouched",])
19+49
View(d[d$county_covid == "untouched",])
max(d$county_covid[d$county_covid != "untouched" & d$county_covid != "proportion"])
d$mergedName[d$county_covid == max(d$county_covid[d$county_covid != "untouched" & d$county_covid != "proportion"])]
d$college[d$county_covid == max(d$county_covid[d$county_covid != "untouched" & d$county_covid != "proportion"])]
d[d$county_covid == max(d$county_covid[d$county_covid != "untouched" & d$county_covid != "proportion"]),]
d[d$college == "Boston University",]
d[d$college == "Harvard University",]
plot(d$county_covid, d$cases, xlim = c(0,0.05))
head(d)
ls()
# Load in colleges.csv file
d = read.csv("./colleges.csv", header = T)
d = d[order(d$cases, decreasing = T),]
d = d[is.na(d$cases) == FALSE,]
# In article, address why we don't have to use proportions (has to do with density)
# We couldnt number of students on campus, but that isnt so bad because^
allCovid = read.csv("./Oct8_allData.csv", header = T)
usData = allCovid[allCovid$Country_Region == "US",]
usData_states = unique(usData$Province_State)
d_states = unique(d$state)
usData_states[usData_states %in% d_states == FALSE]
# Remove colleges in American Samoa and Marshall Islands
d_states[d_states %in% usData_states == FALSE]
#[1] "American Samoa"   "Marshall Islands"
d = d[d$state != "Virgin Islands" & d$state != "Puerto Rico" & d$state != "American Samoa" & d$state != "Marshall Islands",]
usData_states = unique(usData$Province_State)
d_states = unique(d$state)
# change "District of Columbia" to "Washington, D.C." in usData_states
usData$Province_State[usData$Province_State == "District of Columbia"] = "Washington, D.C."
# USED 2019 ESTIMATES FOR STATE POPULATION
statePop = read.csv("./statePop.csv", header = TRUE)
statePop[,1] = substr(statePop[,1], 2, nchar(statePop[,1]))
statePop[,1][statePop[,1] == "District of Columbia"] = "Washington, D.C."
# Find state covid PROPORTION
stateCovid = matrix(0, ncol = 2, nrow = 51)
for(i in 1:51){
stateCovid[i,1] = d_states[i]
x <- usData[usData$Province_State == d_states[i],]
stateCovid[i,2] = sum(x$Confirmed)/statePop[,2][statePop[,1] == d_states[i]]
}
d$state_covid = 0
for(i in 1:nrow(d)){
d$state_covid[i] <- stateCovid[,2][stateCovid[,1] == d$state[i]]
}
pop.lm = lm(cases ~ state_covid, data = d)
summary(pop.lm)
plot(d$state_covid, d$cases)
abline(d$state_covid, d$cases, col = "red")
# Only use worst 500 colleges
w <- d[1:50,]
plot(w$state_covid, w$cases)
abline(w$state_covid, w$cases, col = "red")
##===========================================================
## State data not informative enough.... zoom in on county
##===========================================================
countyCovid <- read.csv("./countyCovid_allDates.csv", header = TRUE)
unique(countyCovid$date)     #want Oct. 8 to match college covid data we have
countyOct8 <- countyCovid[countyCovid$date == "2020-10-08",]
# Add column to data to reflect county proportions... first we have to get proportions
# USED 2019 ESTIMATES FOR COUNTY POPULATION
# Working with county populations
countyPop = read.csv("./countyPop.csv", header = FALSE)
names(countyPop)[names(countyPop) == "V1"] <- "pop"   #change column names
names(countyPop)[names(countyPop) == "V2"] <- "county"
names(countyPop)[names(countyPop) == "V3"] <- "state"
countyPop[,2] = substr(countyPop[,2], 2, nchar(countyPop[,2]))
countyPop[,3] = substr(countyPop[,3], 2, nchar(countyPop[,3]))
for(i in 1:nrow(countyPop)){
if( substring(countyPop[i,2], (nchar(countyPop[i,2])-5), nchar(countyPop[i,2])) == "County"){
countyPop[i,2] = substr(countyPop[i,2], 1, (nchar(countyPop[i,2]) - 7))
}
}
# Glue together county and state
countyPop$name = paste(countyPop$county, countyPop$state, sep = "")
usData$countyState = paste(usData$Admin2, usData$Province_State, sep = "")
covid_county = matrix("untouched", ncol = 2, nrow = 3270)    # length(usData$Admin2)
for(i in 1:3270){
x = usData$countyState[i]
covid_county[i,1] = x
xConfirmed <- usData$Confirmed[usData$countyState == x]
xPop <- countyPop$pop[countyPop$name == x]
if(length(xPop) == 1){
covid_county[i,2] = xConfirmed/xPop
}
else{ next }
}
# Look at one that were untouched
d$county[d$county == "New York City"] = "New York"
d$county[d$county == "Washington, D.C."] = "District of Columbia"
d$county[d$county == "St. Louis County"] = "St. Louis"
covid_county = rbind(covid_county, c("CacheUtah", 3998/128289))
d$mergedName <- paste(d$county, d$state, sep = "")
d$county_covid <- "proportion"
for(i in 1:nrow(d)){
x = d$mergedName[i]
propCov = covid_county[,2][covid_county[,1] == x]
if(length(propCov) == 1){
d$county_covid[i] = propCov
}
}
View(d[d$county_covid == "untouched",])
View(d[d$county_covid == "proportion",])
# NOTE THAT THERE ARE 68 UNIVERSITIES WHOSE COVID PROPS R UNFILLED
plot(d$county_covid, d$cases, xlim = c(0,0.05))
## Scraping from C2i dashboard
install.packages("RSelenium")
install.packages("rvest")
install.packages("tidyverse")
library("tidyverse")
library("rvest")
library("tidyverse")
## Scraping from C2i dashboard
library("RSelenium")
?rsDriver
rD <- rsDriver(browser="chrome", port=4545L, verbose=F)
rD <- rsDriver(browser="chrome", port=4545L, verbose=F)
rD <- rsDriver(browser="chrome", port=4545L, verbose=F)
rD <- rsDriver(browser="chrome", port=4545L, verbose=F)
rD <- rsDriver(browser="chrome", port=4545L, verbose=F)
rD <- rsDriver(browser="chrome", port=4545L, verbose=F)
rD <- rsDriver(browser="chrome", port=4545L, verbose=F)
rD <- rsDriver(browser="chrome", port=4545L, verbose=F)
